from argparse import ArgumentParser

parser = ArgumentParser(description='Reads command line arguments and creates '	\
								  'configuration file. How to use this progam: '\
								  'ctrebound <project_name> where project_name '\
								  'is not optional. If there are no other '		\
								  'arguments provided the configuration file '	\
								  'for <project_name> will be used. If there '	\
								  'is no configuration file, the program will '	\
								  'give a warning and create a new file with '	\
								  'the default parameter. In case there are '	\
								  'other arguments those will be used for the '	\
								  'new configuration file. In case an existing '\
								  'configuration file is found, the system will'\
								  ' use this file in order to configure the '	\
								  'model. -o will overwrite an existing file '	\
								  'without warning and -k will update an '		\
								  'existing configuration file with the '		\
								  'arguments provided' )
parser.add_argument('project_name', 
					type		= str,
					help		= 'Id of the project. (example: JSS-LR-12S for '\
								  '"Jupiter-Satellite-System-Long-Run-12-Satell'\
								  'ites). <project_name> is used in all project'\
								  ' related files.  Use whatever rocks your '	\
								  'boat! ')
parser.add_argument('-k', '--keep', 											
					action		= 'store_const',
					const 		= True,
					help 		= 'Keep and update configuartion file with the '\
								  'arguments provided in the command line.')			
parser.add_argument('-o', '--overwrite', 											
					action		= 'store_const',
					const 		= True,
					help 		= 'Overwrite the configuartion file with the '	\
								  'arguments provided in the command line.')
parser.add_argument('-lb', '--l_bodies', 
	                action		= 'store', 
	                type 		= str, 
	                nargs 		= '*', 
					default 	= ['Jupiter', 'Metis', 'Adrestea', 'Amalthea',
					              'Thebe', 'Io', 'Europa', 'Ganymede', 'Calisto',
					              'Sun', 'Saturn barycenter', 'Uranus barycenter', 
					              'Neptune barycenter'],
					help		= 'List of bodies for the model, separeded by '	\
								  'blanks.')
parser.add_argument('-la', '--l_add_mass_to_sun', 
	                action		= 'store', 
	                type 		= str, 
	                nargs 		= '*', 
					default 	= ['Mercury', 'Venus', 'Earth barycenter', 
					              'Mars barycenter'],
					help		= 'List of bodies for the model, that are '		\
								  'added to the mass of the sun. Make sure to '	\
								  'use planets plus their satellite systems '	\
								  'i.e. "Earth barycenter"')			


parser.add_argument('-st', '--StartTime', action='store', dest='st', type=int, 
					default=0.0, help='start time within archive')
parser.add_argument('-et', '--EndTime', action='store', dest='et', type=int, 
					default=200000000, help='end time within archive')
parser.add_argument('-fr', '--framerate', action='store', dest='fr', type=int, 
					default=25, help='Set <FR> as frame rate for mp4 generated by ffmpeg (eg. -fr 25')
parser.add_argument('-lt', '--lighttheme', action='store_true', 
					default=False, dest='lt', help='Plot in light theme ')
parser.add_argument('-co', '--colors', action='store', dest='co', type=str, nargs='*', 
					default=['blue','purple','turquoise','springgreen','fuchsia','darkorange','yellow','cyan'],
					help='list of colours seperated by blanks')
parser.add_argument('-z', '--lookat', action='store', dest='la', type=str, nargs='*', 
					default=['Jupiter', 'Metis', 'Adrestea', 'Amalthea','Thebe', 'Io', 'Europa', 'Ganymede', 'Calisto'],
					help='list of satellites to plot, separeded by blanks. Dont forget the planet!')
parser.add_argument('--version', action='version', version='%(prog)s 1.2')

results = parser.parse_args()


print(results.project_name)
if results.keep:print('-k is set {}'.format(results.keep))
if results.overwrite:print('-o is set {}'.format(results.overwrite))
print (results.l_bodies)
print (results.l_add_mass_to_sun)
